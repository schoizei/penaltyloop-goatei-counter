@page "/"
@using System.Diagnostics
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment HostEnvironment

<PageTitle>Goaßei-Counter</PageTitle>

<div class="grid-container">
    <!-- Hintergrundbild -->
    <div class="background" @ref="backgroundRef" style="background-image: url('@BackgroundImage');" @onkeydown="NewGoasseiOrdered" tabindex="0"></div>

    <!-- Zähler --> 
    <div class="counter">
        <p class="pop-outin">@CounterValue</p> 
    </div>
</div>

@code {
    private ElementReference backgroundRef;
    private uint CounterValue = 0;
    private string BackgroundImage = "images/1.png";
    private string DataFilePath => Path.Combine(HostEnvironment.ContentRootPath, "counter_value.txt");
    private string ImageFilePath => Path.Combine(HostEnvironment.ContentRootPath, "last_image_index.txt");

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.FocusAsync(backgroundRef);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var imageFolder = Path.Combine(HostEnvironment.WebRootPath, "images");
        var imagesCount = Directory.GetFiles(imageFolder).Count();
        var lastImageIndex = await LoadCounterValue(ImageFilePath);
        var imageIndex = (lastImageIndex + 1) % imagesCount;
        Debug.WriteLine($"OnInitializedAsync image on index [{imageIndex}]");
        await SaveCounterValue(ImageFilePath, imageIndex.ToString());

        CounterValue = await LoadCounterValue(DataFilePath);
        BackgroundImage = $"images/{imageIndex}.png";
        StateHasChanged();
    }

    private async Task NewGoasseiOrdered(KeyboardEventArgs args)
    {
        if (args.Key != " ") return;

        CounterValue++;
        await SaveCounterValue(DataFilePath, CounterValue.ToString());

        NavigationManager.NavigateTo($"/video");
    }

    private async Task SaveCounterValue(string file, string value)
    {
        try
        {
            Debug.WriteLine($"Saving counter value: {value} to file {file}");
            await File.WriteAllTextAsync(file, value);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error saving counter value: {ex.Message}");
        }
    }

    private async Task<uint> LoadCounterValue(string file)
    {
        try
        {
            if (File.Exists(file))
            {
                var content = await File.ReadAllTextAsync(file);
                if (uint.TryParse(content, out var savedValue))
                {
                    Debug.WriteLine($"Loaded counter value: {savedValue}");
                    return savedValue;
                }
            }
            return 1;
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error loading counter value: {ex.Message}");
            return 1;
        }
    }
}
